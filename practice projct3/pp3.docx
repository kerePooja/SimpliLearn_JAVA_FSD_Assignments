package com.simplilearn.entity;

import javax.persistence.Embeddable;

@Embeddable
public class Address {

	private String street;
	
	private String city;
	
	private String state;

	public String getStreet() {
		return street;
	}

	public void setStreet(String street) {
		this.street = street;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	
}


package com.simplilearn.entity;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

@Entity
@Table(name="courses_28012022")
public class Courses {
	
	@Id
	@GeneratedValue
	@Column(name="course_id")
	private int courseId;
	
	
	@Column(name="course_name")
	private String courseName;
	
	@Column(name="course_type")
	private String courseType;
	
	@ManyToMany(cascade=CascadeType.ALL, mappedBy ="courses")
	private List<Student> students;

	public int getCourseId() {
		return courseId;
	}

	public void setCourseId(int courseId) {
		this.courseId = courseId;
	}

	public String getCourseName() {
		return courseName;
	}

	public void setCourseName(String courseName) {
		this.courseName = courseName;
	}

	public String getCourseType() {
		return courseType;
	}

	public void setCourseType(String courseType) {
		this.courseType = courseType;
	}

	public List<Student> getStudents() {
		return students;
	}

	public void setStudents(List<Student> students) {
		this.students = students;
	}
}



package com.simplilearn.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="eproduct_27012022")
public class EProduct {

	@Id
	@GeneratedValue
	@Column(name="eproduct_id")
	private int id;
	
	@Column(name="eproduct_name")
	private String name;
	
	@Column(name="eproduct_price")
	private Double price;

	
	//ALt + S + R
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}
	
}


package com.simplilearn.entity;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

@Entity
@Table(name="phone_28012022")
public class PhoneNumber {

	@Id
	@GeneratedValue
	@Column(name="phone_id")
	private int phoneId;
	
	@Column(name="phone_type")
	private String phoneType;
	
	@Column(name="phone_number")
	private String phoneNumber;
	
	@ManyToOne(cascade=CascadeType.ALL)
	@JoinColumn(name="student_id")
	private Student student;

	public int getPhoneId() {
		return phoneId;
	}

	public void setPhoneId(int phoneId) {
		this.phoneId = phoneId;
	}

	public String getPhoneType() {
		return phoneType;
	}

	public void setPhoneType(String phoneType) {
		this.phoneType = phoneType;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	public Student getStudent() {
		return student;
	}

	public void setStudent(Student student) {
		this.student = student;
	}
}


package com.simplilearn.entity;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;

@Entity
@Table(name = "student_28012022")
public class Student {

	@Id
	@GeneratedValue
	@Column(name = "student_id")
	private int studentId;

	@Column(name = "fname")
	private String fname;

	@Column(name = "lname")
	private String lname;

	@OneToMany(cascade = CascadeType.ALL, mappedBy = "student")
	public List<PhoneNumber> phoneNumbers;

	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "student_courses_link_28012022", joinColumns = {
			@JoinColumn(name = "student_id") }, inverseJoinColumns = { @JoinColumn(name = "course_id") })
	public List<Courses> courses;

	@Embedded
	public Address address;

	public String getAddress() {
		StringBuilder sb = new StringBuilder();

		if (address != null) {
			sb.append(this.address.getStreet());
			sb.append(", " + address.getCity());
			sb.append(", " + address.getState());
		}
		return sb.toString();
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	public String getCourses() {
		StringBuilder sb = new StringBuilder();
		if (courses != null) {
			for (Courses pn : courses) {
				sb.append(pn.getCourseName() + ", ");
			}
		}
		return sb.toString();
	}

	public void setCourses(List<Courses> courses) {
		this.courses = courses;
	}

	public int getStudentId() {
		return studentId;
	}

	public void setStudentId(int studentId) {
		this.studentId = studentId;
	}

	public String getFname() {
		return fname;
	}

	public void setFname(String fname) {
		this.fname = fname;
	}

	public String getLname() {
		return lname;
	}

	public void setLname(String lname) {
		this.lname = lname;
	}

	public String getPhoneNumbers() {
		StringBuilder sb = new StringBuilder();
		if (phoneNumbers != null) {
			for (PhoneNumber pn : phoneNumbers) {
				sb.append(pn.getPhoneNumber() + ", ");
			}
		}
		return sb.toString();
	}

	public void setPhoneNumbers(List<PhoneNumber> phoneNumbers) {
		this.phoneNumbers = phoneNumbers;
	}

}


package com.simplilearn.servlets;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.simplilearn.entity.EProduct;
import com.simplilearn.util.HibernateUtil;

/**
 * Servlet implementation class AddProductServlet
 */
@WebServlet("/add-product")
public class AddProductServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public AddProductServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.getRequestDispatcher("add-product.html").include(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		PrintWriter out = response.getWriter();
		
		String productName = request.getParameter("name");
		String productPrice = request.getParameter("price");
		
		//Step1: Gets session Factory
		SessionFactory sf = HibernateUtil.buildSessionFactory();
		
		//Step 2: Gets Session object
		Session session = sf.openSession();
		
		//Step3: Gets Tx object and begin transaction
		Transaction tx =  session.beginTransaction();
		
		// Step 4: Create and populate entity object
		EProduct product = new EProduct();
		product.setName(productName);
		product.setPrice(Double.parseDouble(productPrice));
		
		//Step 5: <h3 style='color:green'> ProductNischithNischith is created successfully ! </h3>Save record in DB
		session.save(product);
		
		tx.commit();
		
		out.print("<h3> Product is created successfully ! <h3>");
		session.close();

	}

}


package com.simplilearn.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import com.simplilearn.entity.Address;
import com.simplilearn.entity.Courses;
import com.simplilearn.entity.PhoneNumber;
import com.simplilearn.entity.Student;
import com.simplilearn.util.HibernateUtil;

/**
 * Servlet implementation class AddStudentSrevlet
 */
@WebServlet("/add-student")
public class AddStudentSrevlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public AddStudentSrevlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.getRequestDispatcher("add-student.html").include(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		Student student = populateStudent(request);
		SessionFactory sf =HibernateUtil.buildSessionFactory();
		Session session = sf.openSession();
		
		Transaction tx =session.beginTransaction();
		session.save(student);
		tx.commit();
		
		PrintWriter out = response.getWriter();
		out.println("Student saved successfully!");
	}

	private Student populateStudent(HttpServletRequest request) {
		String fname = request.getParameter("fname");
		String lname = request.getParameter("lname");
		
		String phone1 = request.getParameter("phone_1");
		String phoneType1 = request.getParameter("types1");
		
		String phone2 = request.getParameter("phone_2");
		String phoneType2 = request.getParameter("types2");
		
		
		String phone3 = request.getParameter("phone_3");
		String phoneType3 = request.getParameter("types3");
		
		Student student = new Student();
		student.setFname(fname);
		student.setLname(lname);
		
		PhoneNumber p1 = new PhoneNumber();
		p1.setPhoneNumber(phone1);
		p1.setPhoneType(phoneType1);
		p1.setStudent(student);
		
		PhoneNumber p2 = new PhoneNumber();
		p2.setPhoneNumber(phone2);
		p2.setPhoneType(phoneType2);
		p2.setStudent(student);
		
		PhoneNumber p3 = new PhoneNumber();
		p3.setPhoneNumber(phone3);
		p3.setPhoneType(phoneType3);
		p3.setStudent(student);
		
		List<PhoneNumber> phones  = new ArrayList<>();
		phones.add(p1);
		phones.add(p2);
		phones.add(p3);
		
		student.setPhoneNumbers(phones);
		
		
		// ------------------ Populate Courses
		List<Student> students = new ArrayList<>();
		students.add(student);
		
		String courseName1 = request.getParameter("courses_1");
		String courseType1 = request.getParameter("courseType_1");
		
		String courseName2 = request.getParameter("courses_2");
		String courseType2 = request.getParameter("courseType_2");
		
		String courseName3 = request.getParameter("courses_3");
		String courseType3 = request.getParameter("courseType_3");
		
		Courses course1 = new Courses();
		course1.setCourseName(courseName1);
		course1.setCourseType(courseType1);
		course1.setStudents(students);
		
		Courses course2 = new Courses();
		course2.setCourseName(courseName2);
		course2.setCourseType(courseType2);
		course2.setStudents(students);
		
		Courses course3 = new Courses();
		course3.setCourseName(courseName3);
		course3.setCourseType(courseType3);
		course3.setStudents(students);
		
		List<Courses> courses = new ArrayList<>();
		courses.add(course1);
		courses.add(course2);
		courses.add(course3);
		
		student.setCourses(courses);
		
		//============== Populate Address details
		String street = request.getParameter("street");
		String city = request.getParameter("city");
		String state = request.getParameter("state");
		
		Address addr = new Address();
		addr.setCity(city);
		addr.setState(state);
		addr.setStreet(street);
		student.setAddress(addr);
		
		
		
		return student;
	}

}



package com.simplilearn.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.simplilearn.entity.EProduct;
import com.simplilearn.util.HibernateUtil;

/**
 * Servlet implementation class ReadProductServlet
 */
@WebServlet("/readproduct")
public class ReadProductServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ReadProductServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		PrintWriter out = response.getWriter();
		
		SessionFactory sf = HibernateUtil.buildSessionFactory();
		
		Session session = sf.openSession();
		
		List<EProduct> products = session.createQuery(" from EProduct").list();
		
		//Show data on HTML
		
		out.print("<h1> Product List :- </h1>");
		out.print("<style> table,td,th { border:2px solid red; padding: 10px; }</style>" );
		out.print("<table>");
		out.print("<tr>");
		out.print("<th> Product Id </th>");
		out.print("<th> Product Name </th>");
		out.print("<th> Product Price </th>");
		out.print("</tr>");
		
		for(EProduct p : products) {
			
			out.print("<tr>");
			out.print("<td>"+p.getId()+"</td>");
			out.print("<td>"+p.getName()+"</td>");
			out.print("<td>"+p.getPrice()+"</td>");
			out.print("</tr>");
		}
		out.print("</table>");
		
		session.close();
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}



package com.simplilearn.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.rmi.CORBA.StubDelegate;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.simplilearn.entity.Student;
import com.simplilearn.util.HibernateUtil;

/**
 * Servlet implementation class ReadStudentServlet
 */
@WebServlet("/read-student")
public class ReadStudentServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public ReadStudentServlet() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		PrintWriter out = response.getWriter();

		SessionFactory sf = HibernateUtil.buildSessionFactory();

		Session session = sf.openSession();

		List<Student> students = session.createQuery(" from Student").list();
		

		out.print("<h1> Student List :- </h1>");
		out.print("<style> table, td, th {border:2px solid red; padding:10px;}</style>");
		out.print("<table>");
		out.print("<tr>");
		out.print("<th> Student Id </th>");
		out.print("<th> Student First Name </th>");
		out.print("<th> Student Last Name </th>");
		out.print("<th> Student PhoneNumbers </th>");
		out.print("<th> Student Courses </th>");
		out.print("<th> Student Address </th>");
		out.print("</tr>");

		for (Student student : students) {
			out.print("<tr>");
			out.print("<td>" + student.getStudentId() + "</td>");
			out.print("<td>" + student.getFname() + "</td>");
			out.print("<td>" + student.getLname() + "</td>");
			out.print("<td>" + student.getPhoneNumbers() + "</td>");
			out.print("<td>" + student.getCourses() + "</td>");
			out.print("<td>" + student.getAddress() + "</td>");
			out.print("</tr>");
		}
		session.close();
		out.print("</table> </body> </html>");
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}






package com.simplilearn.util;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import com.simplilearn.entity.Courses;
import com.simplilearn.entity.EProduct;
import com.simplilearn.entity.PhoneNumber;
import com.simplilearn.entity.Student;

public class HibernateUtil {

	public static SessionFactory buildSessionFactory() {
		
		// Step 1
		Configuration cfg = new Configuration();
		cfg.configure("hibernate.cfg.xml");
		cfg.addAnnotatedClass(EProduct.class);
		cfg.addAnnotatedClass(Student.class);
		cfg.addAnnotatedClass(PhoneNumber.class);
		cfg.addAnnotatedClass(Courses.class);
		
		//Step 2
		SessionFactory sf = cfg.buildSessionFactory();

		return sf;
	}

}



<hibernate-configuration>
<session-factory>
<property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
<property name="hibernate.connection.url">jdbc:mysql://localhost:3306/amit</property>
<property name="hibernate.connection.username">root</property>
<property name="hibernate.connection.password"></property>
<!--   Optional properties  -->
<property name="hibernate.show_sql">true</property>
<property name="hibernate.format_sql">true</property>
<property name="hbm2ddl.auto">update</property>
</session-factory>
</hibernate-configuration>




<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1> Add Product</h1>

<form method="post" action="add-product">
	<fieldset>
		<legend>Add Product form</legend>
		Product Name: <input type="text" name="name" id="name" /><br/><br/>
		Product Price: <input type="text" name="price" id = "price" /> <br/><br/>
		<input type="submit" value="Add Product">
	</fieldset>
</form><!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Add Student</title>
</head>
<body>

	<h1>Add Student Page</h1>

	<form method="post" action="add-student">
		<fieldset>
			<legend>Add Student Form</legend>
			First Name: <input type="text" name="fname" id="fname" /> <br />
			Last Name: <input type="text" name="lname" id="lname" /> <br />

			<p>
				<label for="name"> Phone Number1</label> <input type="text"
					name="phone_1" /> <select name="types1" id="types1">
					<option value="1">Office</option>
					<option value="2">Cell</option>
					<option value="3">Fax</option>
				</select>
			</p>

			<p>
				<label for="name"> Phone Number2</label> <input type="text"
					name="phone_2" /> <select name="types2" id="types2">
					<option value="1">Office</option>
					<option value="2">Cell</option>
					<option value="3">Fax</option>
				</select>
			</p>

			<p>
				<label for="name"> Phone Number3</label> <input type="text"
					name="phone_3" /> <select name="types3" id="types3">
					<option value="1">Office</option>
					<option value="2">Cell</option>
					<option value="3">Fax</option>
				</select>
			</p>
			
			
			<p>
				<label for="name">Courses1</label>
				<input type="text" name="courses_1" />
				<select name="courseType_1" id="courseType_1">
					<option value="1">Java</option>
					<option value="2">Hibernate</option>
					<option value="3">Spring</option>
				</select>
			</p>
			
			<p>
				<label for="name">Courses2</label>
				<input type="text" name="courses_2" />
				<select name="courseType_2" id="courseType_2">
					<option value="1">Java</option>
					<option value="2">Hibernate</option>
					<option value="3">Spring</option>
				</select>
			</p>
			
			<p>
				<label for="name">Courses3</label>
				<input type="text" name="courses_3" />
				<select name="courseType_3" id="courseType_3">
					<option value="1">Java</option>
					<option value="2">Hibernate</option>
					<option value="3">Spring</option>
				</select>
			</p>
			
			<p>
			<label for="name">Address</label>
			
			Street: <input type="text" name="street" /> <br/>
			City: <input type="text" name="city" /> <br/>
			State: <input type="text" name="state"> 
			</p>
			
			
			<br /> <input type="submit" value="Add Product">

		</fieldset>

	</form>

</body>
</html>


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<h1>Welcome to Hibernate CRUD application</h1>

	<a href="read-product">Read Product</a>
	<br />
	<a href="add-product">Add Product</a>


</body>
</html>



<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Student CRUD operation</title>
</head>
<body>


	<nav>
		<a href="add-student">Add Student </a> || <a href="read-student"> Read Student</a>
	</nav>


</body>
</html>